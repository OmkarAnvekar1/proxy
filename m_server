//multi server
#include<stdio.h> 
#include<sys/types.h> 
#include<sys/socket.h> 
#include<netinet/in.h> 
#include<arpa/inet.h> 
#include<stdlib.h> 
#include<unistd.h> 
#include<string.h> 
#include<pthread.h> 
 
#define SERVER_TCP_PORT 5750 
#define BUFLEN 256 
#define MAX 90 
int flag = 0; 
void *handle_client(void *arg) { 
int sockfd = *((int *)arg); 
char buff[MAX]; 
int n; 
 
while (!flag) { 
bzero(buff, MAX); 
n = read(sockfd, buff, sizeof(buff)); 
if (n <= 0) { 
printf("Client disconnected.\n"); 
break; 
} 
printf("Message from client: %s", buff); 
 
if (strncmp("exit", buff, 4) == 0) { 
printf("Server exiting.\n"); 
flag = 1; 
break; 
} 
 
printf("Enter message to be sent to client:\n"); 
fgets(buff, sizeof(buff), stdin); 
n = strlen(buff); 
write(sockfd, buff, sizeof(buff)); 
} 
 
close(sockfd); 
pthread_exit(NULL); 
} 
 
int main(int argc, char **argv) { 
int yes = 1; 
int sd, new_sd, port; 
struct sockaddr_in server, client; 
socklen_t client_len; 
pthread_t tid; 
 
port = atoi(argv[1]); // Port=5750 
if ((sd = socket(AF_INET, SOCK_STREAM, 0)) == -1) { 
fprintf(stderr, "Can't create a socket\n"); 
exit(1); 
} 
 
server.sin_family = AF_INET; 
server.sin_port = htons(port); 
server.sin_addr.s_addr = htonl(INADDR_ANY); 
 
if (setsockopt(sd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(yes)) == -1) { 
perror("setsockopt"); 
exit(1); 
} 
 
if (bind(sd, (struct sockaddr *)&server, sizeof(server)) == -1) { 
fprintf(stderr, "Can't bind name to socket\n"); 
exit(1); 
} 
 
listen(sd, 5); 
printf("Server listening for connections...\n"); 
 
while (1) { 
client_len = sizeof(client); 
if ((new_sd = accept(sd, (struct sockaddr *)&client, &client_len)) == -1) { 
fprintf(stderr, "Can't accept client\n"); 
exit(1); 
} 
 
printf("Connection accepted from %s:%d\n", inet_ntoa(client.sin_addr), 
ntohs(client.sin_port)); 
 
// Create a new thread for each client connection 
if (pthread_create(&tid, NULL, handle_client, (void *)&new_sd) != 0) { 
perror("pthread_create"); 
close(new_sd); 
} 
} 
 
close(sd); 
return 0; 
}
